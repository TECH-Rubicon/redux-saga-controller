
// outsource dependencies
import { ActionCreator, AnyAction } from 'redux';

// local dependencies
import { selectActualCSD } from './reducer';

export type DefaultActions = 'UPDATE_CTRL' | 'CLEAR_CTRL'

export class Ctrl<T extends string, I> {
  // NOTE Initial values of reducer
  initial = {} as I;

  // NOTE Controller name
  name;

  // NOTE All Action types which are passed to types
  TYPE = {} as Record<T, string>;

  // NOTE Selector function to get state of controller reducer
  selector;

  // NOTE Redux saga subscriber
  subscriber; // NOTE any, but contains () => Generator<ForkEffect<never>, void, unknown>;

  // NOTE All action creators which are generated by types
  action = {} as Record<T | DefaultActions, ActionCreator<AnyAction>>;

  // NOTE Subscriber wrapped with Fork
  private _channel = null; // It should be any because redux-saga doesn't understand a type

  constructor ({ types = [], prefix, initial, subscriber } : {
    initial: I,
    prefix?: string,
    types: Array<T>,
    // It should be any because redux-saga doesn't understand a type
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    subscriber: any,
  }) {
    // NOTE Generate name if prefix present and is valid
    this.name = typeof prefix === 'string' ? prefix : '1';
    // NOTE Check types and rewrite value if it isn't valid
    this.initial = initial;
    // NOTE Prepare default actions
    // this.action.CLEAR_CTRL = clearCSDAction(this.name);
    // this.action.UPDATE_CTRL = updateCSDAction(this.name);
    // NOTE prepare createTypes and actions
    for (const type of types) {
      // NOTE Generate Acton types
      // this.TYPE[type] = `${this.name}/${type.toUpperCase()}`;
      const t = `${this.name}/${type.toUpperCase()}`;
      // NOTE Generate Acton creators
      this.action[type] = <T>(payload?: T) => ({ type: t, payload });
    }
    // NOTE Prepare selector for controller by name
    this.selector = selectActualCSD<I>(this.name);
    // NOTE Setup subscriber if it valid or throw an error
    this.subscriber = subscriber;
  }

  // NOTE Setter to set channel
  // It should be any because redux-saga doesn't understand a type
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  set channel (channel: any) {
    if (channel && this._channel) {
      console.error(`%c FOUND DUPLICATION FOR CONTROLLER: ${this.name} `, 'color: #FF6766; font-weight: bolder; font-size: 18px;'
        , '\n Please make sure you use only one instance of Controller within DOM in same time'
        , '\n controller:', this
      );
    }
    this._channel = channel;
  }

  // NOTE Getter to get channel
  get channel () {
    return this._channel;
  }
}
