"use strict";(self.webpackChunkredux_saga_controller=self.webpackChunkredux_saga_controller||[]).push([[149],{134:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var o=t(4848),r=t(8453);const a={sidebar_position:1},l="Getting Started",i={id:"Introductions/getting-started",title:"Getting Started",description:"Step 1: Connect Controller to redux store",source:"@site/../docs/Introductions/getting-started.md",sourceDirName:"Introductions",slug:"/Introductions/getting-started",permalink:"/docs/Introductions/getting-started",draft:!1,unlisted:!1,editUrl:"https://github.com/TECH-Rubicone/redux-saga-controller/edit/master/docs/intro.md/../docs/Introductions/getting-started.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Info",permalink:"/docs/Introductions/"},next:{title:"select",permalink:"/docs/api-reference/select"}},s={},c=[{value:"Step 1: Connect Controller to redux store",id:"step-1-connect-controller-to-redux-store",level:2},{value:"Step 2: Prepare controller annotation",id:"step-2-prepare-controller-annotation",level:2},{value:"Step 3: Use it inside your React Components",id:"step-3-use-it-inside-your-react-components",level:2},{value:"React hooks",id:"react-hooks",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"getting-started",children:"Getting Started"}),"\n",(0,o.jsx)(n.h2,{id:"step-1-connect-controller-to-redux-store",children:"Step 1: Connect Controller to redux store"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import createSagaMiddleware from 'redux-saga';\nimport { reducer, sagas, path } from 'redux-saga-controller';\nimport { createStore, applyMiddleware, combineReducers, compose } from 'redux';\n\n\nconst saga = createSagaMiddleware();\nconst middleware = compose(applyMiddleware(saga));\nconst reducers = combineReducers({\n  [path]: reducer,\n  // NOTE whatever what you may need\n  ...\n});\n\nconst store = createStore(reducers, middleware);\n\n// NOTE simple initialize only \"controller\"\n// saga.run(sagas);\n// NOTE or controller with some thing else\nsaga.run(function * () {\n  // NOTE provide to \"controller\" separated saga process\n  yield fork(sagas);\n  // NOTE whatever what you may need\n  ...\n});\n\nexport default store;\n"})}),"\n",(0,o.jsx)(n.h2,{id:"step-2-prepare-controller-annotation",children:"Step 2: Prepare controller annotation"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import createController from 'redux-saga-controller';\n\nexport const controller = createController(\n  // NOTE Types for which action creators will be generated\n  {\n    initialize: 'init',\n    getSelf: 'test',\n  },\n  // NOTE root subscriber of controller \n  function * () {\n    yield takeEvery(controller.action.initialize.TYPE, initializeSaga);\n    yield takeEvery(controller.action.getSelf.TYPE, getSelfSaga);\n  },\n  // NOTE Initial data for your redux state\n  {\n    initialized: false,\n    disabled: false,\n    data: {\n      name: 'John',\n      age: 30,\n    }\n  }\n);\n\nfunction * initializeSaga ({ type, payload }) {\n  console.log(`%c ${type} `, 'color: #FF6766; font-weight: bolder; font-size: 12px;'\n      , '\\n payload:', payload\n  );\n  // NOTE each time bring to initial state\n  yield put(controller.action.clearCtrl());\n  // NOTE prepare view data\n  ...\n  // NOTE unblock view when will be done all preparations\n  yield put(controller.action.updateCtrl({ initialized: true }));\n}\nfunction * getSelfSaga ({ type, payload }) {\n  console.log(`%c ${type} `, 'color: #FF6766; font-weight: bolder; font-size: 12px;'\n      , '\\n payload:', payload\n  );\n  const data = yield call(getDataFromAPI);\n  yield put(controller.action.updateCtrl({ data }));\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"step-3-use-it-inside-your-react-components",children:"Step 3: Use it inside your React Components"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"import React from 'react';\nimport { controller } from './controller';\nimport { useController } from 'redux-saga-controller';\n\nexport const Example1 = memo(() => {\n  // NOTE Prefer way\n  const [\n    { data, disabled, initialized },\n    { initialize, getSelf }\n  ] = useController(controller);\n\n  useEffect(() => { initialize(); }, [initialize]);\n\n  return !initialized ? null : <div>\n    <h1>Hello {data.name}! Your age is {data.age}</h1>\n    <button disabled={disabled} onClick={() => getSelf()}>Get Details</button>\n  </div>;\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"react-hooks",children:"React hooks"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"// useController - to use you controller and you will get all data you need\nconst [reducer, actions, isControllerSubscribed] = useController(controller);\n\n// To get separately you can use next hooks\nconst reducer = useControllerData(controller);\nconst actions = useControllerActions(controller);\nconst isControllerConnected = useControllerSubscribe(controller);\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>i});var o=t(6540);const r={},a=o.createContext(r);function l(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);